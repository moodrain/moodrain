<?php
namespace App\Support;

use Muyu\Config;
use Muyu\Tool;

class DbBuilder
{
    private $type;
    private $host;
    private $user;
    private $pass;
    private $db;
    private $charset;
    private $collate;
    private $pdo;
    private $pdoAttr;
    private $autoMakeTable;
    private $tables;
    private $tablePrefix;

    public function __construct(string $muyuConfig = 'database.default', bool $init = true)
    {
        $config = new Config();
        if($init)
            $this->init($config($muyuConfig));
    }

    function init(array $config = [], bool $connect = true) : DbBuilder
    {
        $this->charset = 'utf8mb4';
        $this->collate = 'utf8mb4_general_ci';
        $this->tables = [];
        $this->autoMakeTable = false;
        $this->tablePrefix = '';
        foreach($config as $key => $val)
            $this->$key = $val;
        if(!$connect)
            return $this;
        $conf = [
            'type' => $this->type,
            'host' => $this->host,
            'user' => $this->user,
            'pass' => $this->pass,
            'db'   => $this->db,
        ];
        if($this->db)
        {
            $confTmp = $conf;
            $confTmp['db'] = '';
            $this->pdo = Tool::pdo('', $confTmp, $this->pdoAttr);
            $stmt = $this->pdo->query('SHOW DATABASES');
            $rs = $stmt->fetchAll(\PDO::FETCH_NUM);
            $dbs = [];
            foreach($rs as $db)
                $dbs[] = $db[0];
            if(in_array($this->db, $dbs))
                $this->pdo->exec('USE ' . $this->db);
        }
        else
            $this->pdo = Tool::pdo('', $conf, $this->pdoAttr);
        return $this;
    }

    function pdoAttr(array $attr = null)
    {
        if($attr)
            $this->pdoAttr = $attr;
        else
            return $this->pdoAttr;
    }

    function db(string $db = null)
    {
        if($db)
        {
            $this->db = $db;
            return $this;
        }
        return $this->db;
    }

    function autoMakeTable(bool $auto = null)
    {
        if($auto)
        {
            $this->autoMakeTable = $auto;
            return $this;
        }
        return $this->autoMakeTable;
    }

    function charset() : string
    {
        return $this->charset;
    }

    function collate() : string
    {
        return $this->collate;
    }

    function tablePrefix($prefix = null)
    {
        if($prefix)
        {
            $this->tablePrefix = $prefix;
            return $this;
        }
        return $this->tablePrefix;
    }

    function createDb(string $db = null, bool $use = true, string $charset = 'utf8mb4', $collate = 'utf8mb4_general_ci') : DbBuilder
    {
        $db = $db ?? $this->db ?? null;
        !$db && die('db name not set');
        $this->pdo->exec('CREATE DATABASE IF NOT EXISTS ' . $db . ' DEFAULT CHARSET ' . $charset . ' COLLATE ' . $collate. ';');
        if($use)
            $this->pdo->exec('USE ' . $db);
        return $this;
    }

    function dropDb(string $db = null) : DbBuilder
    {
        $dbName = $db ?? $this->db;
        !$dbName && die('db name not set');
        $this->pdo->exec('DROP DATABASE IF EXISTS ' . $dbName);
        return $this;
    }

    function json() : string
    {
        $db = new \stdClass();
        $db->db = $this->db;
        $db->tablePrefx = $this->tablePrefix;
        $db->tables = $this->tables;
        return json_encode($db, 128 | 256);
    }

    function sql() : string
    {
        $sql = '# Generated by Moodrain DbBuilder, see https://github.com/moodrain/moodrain for mor information' . PHP_EOL;
        $sql .= $this->db ? 'CREATE DATABASE IF NOT EXISTS ' . $this->db . ' DEFAULT CHARSET ' . $this->charset . ' COLLATE ' . $this->collate. ';' . PHP_EOL . 'USE ' . $this->db . ';' . PHP_EOL : '';
        foreach($this->tables as $tableName => $table)
            $sql .= $this->TableBuilder($tableName, $table, $this->tablePrefix, false, false)->sql() . PHP_EOL;
        return $sql;
    }

    function bean(string $package = 'main.entity', string $dir = 'bean') : DbBuilder
    {
        !file_exists($dir) && mkdir($dir);
        foreach($this->tables as $tableName => $table)
            file_put_contents($dir . '/' . ucfirst(Tool::hump(str_replace($this->tablePrefix, '', $tableName . '.java'))), $this->TableBuilder($tableName, $table, $this->tablePrefix, false, false)->bean()) ;
        return $this;
    }

    function save(string $name = null,string $mode = null)
    {
        $filename = $name ?? $this->db . '.json' ?? time() . '.json';
        if(!$mode)
        {
            $ext = Tool::ext($filename);
            $mode = $ext == 'json' || $ext == 'sql' ? $ext : 'json';
        }
        if($mode != 'json' && $mode != 'sql')
            die('unsupported mode');
        $content = $mode == 'json' ? $this->json() : $this->sql();
        file_put_contents($filename, $content);
    }

    function read(string $file = null) : DbBuilder
    {
        $filename = $file ?? $this->db . '.json';
        !file_exists($filename) && die('file not found');
        $this->input(json_decode(file_get_contents($filename), true));
        return $this;
    }

    function input(array $db)
    {
        !$db && die('parse json fail');
        $this->db = $db['db'];
        $this->tablePrefix = $db['tablePrefix'];
        $this->tables = $db['tables'];
        return $this;
    }

    function build() : DbBuilder
    {
        foreach($this->tables as $tableName => $table)
            $this->TableBuilder($tableName, $table, $this->tablePrefix, true, false);
        return $this;
    }

    function dump() : DbBuilder
    {
        var_dump($this);
        return $this;
    }

    function TableBuilder(string $table = '', array $fields = [], string $prefix = '', bool $build = null, bool $addToTables = true)
    {
        $addToTables && $this->tables[$table] = $fields;
        $build === null && $build = $this->autoMakeTable;
        $class =  new class($this->pdo, $table, $fields, $prefix)
        {
            private $pdo;
            private $table;
            private $fields;
            private $primaryKey;
            private $prefix;

            function __construct(?object $pdo, string $table = '', array $fields = [], string $prefix = '')
            {
                $this->pdo = $pdo;
                $this->table = $table;
                $this->prefix = $prefix;
                foreach($fields as $field)
                    $this->addField($field[0], $field[1] , $field[2] ?? []);
            }

            function table(string $table = null)
            {
                if($table)
                {
                    $this->table = $table;
                    return $this;
                }
                return $this->table;
            }

            function primaryKey() : string
            {
                return $this->primaryKey;
            }

            function prefix(string $prefix = null)
            {
                if($prefix)
                {
                    $this->prefix = $prefix;
                    return $this;
                }
                return $this->prefix;
            }

            function addField(string $name, string $type, array $attr = []) : void
            {
                $theAttr = [];
                foreach($attr as $a)
                {
                    $a == 'primary' && $this->primaryKey = $name;
                    $a == 'increment' && $theAttr['increment'] = 'AUTO_INCREMENT';
                    $a == 'null' && $theAttr['null'] = 'NULL';
                    $a == 'notnull' && $theAttr['null'] = 'NOT NULL';
                    $a == 'unique' && $theAttr['unique'] = 'UNIQUE';
                }
                $theAttr['null'] = $theAttr['null'] ?? 'NOT NULL';
                $type = $type == 'varchar' ? 'varchar(255)' : $type;
                $this->fields[] = ['name' => $name, 'type' => $type, 'attr' => $theAttr];
            }

            function make() : void
            {
                $sql = $this->sql();
                $this->pdo->exec($sql);
            }

            function sql() : string
            {
                $sql = 'CREATE TABLE `' . $this->prefix . $this->table . '` (';
                foreach($this->fields as $f)
                {
                    $sql .= '`' . $f['name'] . '` ' . $f['type'];
                    $sql .= $f['attr'] ? ' ' . implode(' ', $f['attr']) : '';
                    $sql .= ', ';
                }
                $sql .= 'PRIMARY KEY (`' . $this->primaryKey . '`));';
                return $sql;
            }

            function bean($package = 'main.entity') : string
            {
                $sql = '';
                $package = 'package ' . $package . ';' . PHP_EOL;
                $class =  PHP_EOL . 'public class ' . ucfirst(Tool::hump($this->table)) . PHP_EOL . '{' . PHP_EOL;
                foreach($this->fields as $f)
                    $sql .= '   ' . 'private ' . $this->toJavaType($f['type']) . ' ' . Tool::hump($f['name']) . ';' . PHP_EOL;
                $sql .= PHP_EOL;
                foreach($this->fields as $f)
                {
                    $sql .= '   public ' . $this->toJavaType($f['type']) . ' ' . 'get' . ucfirst(Tool::hump($f['name'])) . '() { return ' . Tool::hump($f['name']) . '; }' . PHP_EOL;
                    $sql .= '   public void set' . ucfirst(Tool::hump($f['name'])) . '(' . $this->toJavaType($f['type']) . ' ' . Tool::hump($f['name']) . ') { this.' . Tool::hump($f['name']) . ' = ' . Tool::hump($f['name']) . '; }' . PHP_EOL;
                }
                $sql = $package . $class . $sql . '}';
                return $sql;
            }

            private function toJavaType(string $type)
            {
                if(strpos($type, 'varchar') !== false)
                    return 'String';
                if(strpos($type, 'text') !== false)
                    return 'String';
                if(strpos($type, 'int') !== false)
                    return 'Integer';
                switch($type)
                {
                    case 'float':    return 'Float';
                    case 'date':     return 'java.sql.Date';
                    case 'time':     return 'java.sql.Time';
                    case 'datetime': return 'java.sql.Timestamp';
                    default:         return 'Object';
                }
            }
        };
        if($build)
        {
            $class->make();
            return $this;
        }
        return $class;
    }
}